class Solution:
    def diffWaysToCompute(self, expression: str) -> List[int]:
        if len(expression) < 2:
            return [int(expression)]
        ans = []
        m = {}
        op = {
            '*': lambda x, y: x * y,
            '-': lambda x, y: x - y,
            '+': lambda x, y: x + y,
        }

        def divideandconquer(s):
            if s in m:
                return m[s]
            left, right, res = [], [], []
            for i in range(len(s)):
                if s[i] in op:
                    s1 = s[0:i]
                    s2 = s[i + 1:]
                    left = divideandconquer(s1)
                    right = divideandconquer(s2)
                    for l in m[s1]:
                        for r in m[s2]:
                            res.append(op[s[i]](l,r))
            if not res:
                res.append(int(s))
            m[s] = res
            return res

        ans = divideandconquer(expression)
        return ans
