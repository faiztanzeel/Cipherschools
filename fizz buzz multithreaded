from threading import Lock
class FizzBuzz:
    def __init__(self, n: int):
        self.n = n
        self.done=False
        
        self.l_fizz,self.l_buzz,self.l_fizzbuzz,self.l_number = Lock(), Lock(), Lock(), Lock()
        self.l_fizz.acquire()
        self.l_buzz.acquire()
        self.l_fizzbuzz.acquire()
        

    # printFizz() outputs "fizz"
    def fizz(self, printFizz: 'Callable[[], None]') -> None:
        while True:
            self.l_fizz.acquire()
            if self.done: break
            printFizz()
            self.l_number.release()
            
            
    	

    # printBuzz() outputs "buzz"
    def buzz(self, printBuzz: 'Callable[[], None]') -> None:
        while True:
            self.l_buzz.acquire()
            if self.done: break
            printBuzz()
            self.l_number.release()
    	

    # printFizzBuzz() outputs "fizzbuzz"
    def fizzbuzz(self, printFizzBuzz: 'Callable[[], None]') -> None:
        while True:
            self.l_fizzbuzz.acquire()
            if self.done: break
            printFizzBuzz()
            self.l_number.release()
        

    # printNumber(x) outputs "x", where x is an integer.
    def number(self, printNumber: 'Callable[[int], None]') -> None:
        for i in range(1,self.n+1):
            self.l_number.acquire()
            if i%15==0:
                self.l_fizzbuzz.release()
            elif i%3==0:
                self.l_fizz.release()
            elif i%5==0:
                self.l_buzz.release()
            else:
                printNumber(i)
                self.l_number.release()
        self.l_number.acquire()
        self.done=True
        self.l_fizz.release()
        self.l_buzz.release()
        self.l_fizzbuzz.release()
