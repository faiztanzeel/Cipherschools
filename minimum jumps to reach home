class Solution:
    def minimumJumps(self, forbidden: List[int], a: int, b: int, x: int) -> int:
        forbidden = set(forbidden)
        bound = max(max(forbidden) + a + b, x + b)
        memo = {}

        def dp(pos, backward):
            if pos > bound or pos < 0 or pos in forbidden:
                return float('inf')
            if pos == x:
                return 0
            if (pos, backward) not in memo:
                memo[pos, backward] = 1 + dp(pos + a, False)
                if not backward:
                    memo[pos, backward] = min(memo[pos, backward],
                                              1 + dp(pos - b, True))
            return memo[pos, backward]

        ans = dp(0, True)
        return ans if ans != float('inf') else -1
